`timescale 1ns/1ps

module tb_axis_mux;

    reg clk = 0;
    reg rst = 1;
    reg enable = 1;
    reg [1:0] select = 0;
    reg [15:0] s_axis_tdata = 16'hA5A5;
    reg [1:0] s_axis_tvalid = 2'b10;
    wire [1:0] s_axis_tready;
    wire [7:0] m_axis_tdata;
    wire m_axis_tvalid;
    reg m_axis_tready;
    wire m_axis_tlast;
 
    // Instantiate the DUT
    axis_mux #(
        .S_COUNT(2),
        .DATA_WIDTH(8)
    ) UUT (
        .clk(clk),
        .rst(rst),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tvalid(s_axis_tvalid),
        .s_axis_tready(s_axis_tready),
        .s_axis_tlast(),
        .m_axis_tdata(m_axis_tdata),
        .m_axis_tvalid(m_axis_tvalid),
        .m_axis_tready(m_axis_tready),
        .m_axis_tlast(m_axis_tlast),
        .enable(enable),
        .select(select)
    );

    // Clock generation
    always #5 clk = ~clk;
    
    // Reset generation
    initial begin
        #10 rst = 0;
    end
    
    // Test input stimuli
    initial begin
        // Test case 1: Input on port 0
        #50;
        
        // Test case 2: Input on port 1
        select = 1;
        s_axis_tdata = 16'h5A5A;
        s_axis_tvalid = 2'b01;
        #50;
        
        // Test case 3: Input on both ports, alternating selection
        select = 0;
        s_axis_tdata = 16'hA5A5;
        s_axis_tvalid = 2'b10;
        #50;
        select = 1;
        s_axis_tdata = 16'h5A5A;
        s_axis_tvalid = 2'b01;
        #50;
        
        // End simulation
        #100 $finish;
    end
    
endmodule
